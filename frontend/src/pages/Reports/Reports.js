import React, { useEffect, useRef, useState } from "react";
import Widget from "../../components/Widget/Widget";
import s from "./Reports.module.scss";
import { hideLoader, showLoader } from "../../actions/loader";
import { useDispatch, useSelector } from "react-redux";
import { createReports, getReports, showReports } from "../../api/reportsAPI";
import { usePipelines } from "../../hooks/usePipelines";
import WizBIDropDown from "../../core/WizBIDropDown/WizBIDropDown";
import { Dropdown } from "primereact/dropdown";
import {
  createSearchParams,
  useNavigate,
  useSearchParams,
} from "react-router-dom";
import { v4 as uuidv4 } from "uuid";
import { Toast } from "primereact/toast";
import { Checkbox } from "primereact/checkbox";
import { InputSwitch } from "primereact/inputswitch";
import WizBIInput from "../../core/WizBIInput/WizBIInput";
import { Button } from "primereact/button";
import { Dialog } from "primereact/dialog";
import SQLIcon from "../../components/Icons/Global/SQLIcon";

const Reports = () => {
  const isLoading = useSelector((state) => state.loader.loaderVisibility);
  const [reportsList, setReportsList] = useState([]);
  const [reportsCustList, setReportsCustList] = useState([]);
  const [autoGeneratedReportsList, setAutoGeneratedReportsList] =
    useState(null);
  const [customReportsList, setCustomReportsList] = useState(null);
  const [activeIndex, setActiveIndex] = useState(0);
  const [isAllLoaded, setIsAllLoaded] = useState(true);
  const toast = useRef(null);
  const dispatch = useDispatch();
  const { pipelinesResult } = usePipelines({pipeline_status: "active"});
  const resetPipelineInfo = {
    name: "",
    description: "description",
    airflow_pipeline_name: "airflow_pipeline_name",
    airflow_pipeline_link: "airflow_pipeline_link",
    status: "",
    source_schema_name: "",
    dest_schema_name: "",
    db_conn_source_id: 0,
    db_conn_dest_id: 0,
  };
  const resetReportsInfo = {
    id: 0,
    pipeline_id: 0,
    name: "",
    sql_query: "",
    type: "custom_generated",
  };
  const [submitted, setSubmitted] = useState(false);
  const [pipelineInfo, setPipeLineInfo] = useState(resetPipelineInfo);
  const [reportsInfo, setReportsInfo] = useState(resetReportsInfo);
  const [searchParams, setSearchParams] = useSearchParams();
  const navigate = useNavigate();
  const navToTarget = (url) => {
    navigate(url);
  };
  const [showAllData, setShowAllData] = useState(false);
  const [isAddCutomReportVisible, setIsAddCutomReportVisible] = useState(false);
  const onShowAllData = (e) => {
    setShowAllData(e.checked);
    if (e.checked) {
      navToTarget({
        pathname: "/app/reports",
      });
      searchParams.set("pipelineId", "");
      setPipeLineInfo(resetPipelineInfo);
      reportsData(null, activeIndex);
    }
  };

  useEffect(() => {
    if (pipelinesResult.length) {
      if (searchParams.get("pipelineId")) {
        const info =
          pipelinesResult.find(
            (pInfo) => pInfo.id === parseInt(searchParams.get("pipelineId")),
          ) || pipelineInfo;
        setPipeLineInfo(info);
      }
      const info = pipelinesResult[0];
      setPipeLineInfo(info);
      navToTarget({
        pathname: "/app/reports",
        search: `?${createSearchParams({
          pipelineId: info.id,
        })}`,
      });
      setTimeout(() => {
        getReportsInfo("auto-generated");
      }, 0);
    }
  }, [pipelinesResult]);

  const getReportsInfo = (report_type) => {
    dispatch(showLoader());
    let url =
      report_type === "auto-generated"
        ? "/rebiz/v1/reports-auto"
        : "/rebiz/v1/reports-custom";
    if (searchParams.get("pipelineId")) {
      url =
        report_type === "auto-generated"
          ? "/rebiz/v1/reports-auto-pipeline"
          : "/rebiz/v1/reports-custom-pipeline";
      url = `${url}/${searchParams.get("pipelineId")}`;
    } else if (report_type === "auto-generated" && !searchParams.get("pipelineId")) {
      return null;
    }
    getReports(url, (resp) => {
      if (!!resp && (!!resp.detail || !!resp.message)) {
        dispatch(hideLoader());
        toast.current.show({
          severity: "error",
          summary: "Error",
          detail: resp.detail || resp.message,
          life: 3000,
        });
      } else {
        // setShowAllData(true);
        let filterList = resp || [];
        const id = parseInt(searchParams.get("pipelineId"));
        if (!!id) {
          setIsAllLoaded(false);
          setShowAllData(false);
          if (resp.length) {
            filterList = resp.filter((repo) => repo.pipeline_id === id);
          }
        }

        if (report_type === "auto-generated") {
          setAutoGeneratedReportsList(filterList);
          setReportsList(resp);
        } else {
          setCustomReportsList(filterList);
          setReportsCustList(resp);
        }
        setTimeout(() => {
          dispatch(hideLoader());
        }, 0);
      }
    });
  };
  // useEffect(() => {
  //     getReportsInfo('auto-generated');
  // }, []);

  const filterReportsList = (e) => {
    setShowAllData(false);
    setPipeLineInfo(e.value);
    if (isAllLoaded) {
      if (!!activeIndex) {
        setCustomReportsList(
          reportsCustList.filter((repo) => repo.pipeline_id === e.value.id),
        );
      } else {
        setAutoGeneratedReportsList(
          reportsList.filter((repo) => repo.pipeline_id === e.value.id),
        );
      }
    } else {
      getReportsInfo(!!activeIndex ? "custom_generated" : "auto-generated");
    }
    navToTarget({
      pathname: "/app/reports",
      search: `?${createSearchParams({
        pipelineId: e.value.id,
      })}`,
    });
  };

  const downloadReport = (url, id, name, type) => {
    dispatch(showLoader());
    showReports(url, id, (resp) => {
      dispatch(hideLoader());
      if (!!resp && !!resp.message) {
        toast.current.show({
          severity: "error",
          summary: "Error",
          detail: resp.detail || resp.message,
          life: 3000,
        });
      } else {
        var url = window.URL.createObjectURL(resp);
        if (type.toLowerCase() !== "h") {
          setTimeout(() => {
            var a = document.createElement("a");
            a.href = url;
            a.download =
              `${name}_${id}` +
              (type === "H"
                ? ".html"
                : type === "E"
                  ? ".xls"
                  : type === "S"
                    ? ".sql"
                    : ".pdf");
            document.body.appendChild(a); // we need to append the element to the dom -> otherwise it will not work in firefox
            a.click();
            a.parentNode.removeChild(a);
          }, 0);
        } else {
          return window.open(url, "_blank");
        }
      }
    });
  };

  const customReportsFooter = () => {
    return (
      <div className="d-flex justify-content-between align-items-center">
        <span className="float-left d-flex justify-content-between align-items-center">
          <InputSwitch checked={false} />
          <span className="mx-3">Tabular / Graphical</span>
        </span>
        <span className="float-right">
          <Button
            label="Cancel"
            icon="pi pi-times"
            className="p-button p-component p-button-text text-wizBi mx-2 p-2"
            onClick={() => {
              setIsAddCutomReportVisible(false);
            }}
          />
          <Button
            label="Save"
            icon="pi pi-check "
            className="p-button p-component mx-2 bg-wizBi p-2"
            autoFocus
            onClick={() => {
              setSubmitted(true);
              if (
                reportsInfo.name &&
                reportsInfo.pipeline_id &&
                reportsInfo.sql_query
              ) {
                setSubmitted(false);
                dispatch(showLoader());
                createReports(reportsInfo, (resp) => {
                  dispatch(hideLoader());
                  if (!!resp && !!resp.message) {
                    toast.current.show({
                      severity: "error",
                      summary: "Error",
                      detail: resp.detail || resp.message,
                      life: 3000,
                    });
                  } else {
                    toast.current.show({
                      severity: "success",
                      summary: "Confirmed",
                      detail: "Custom reports have been successfully generated",
                      life: 3000,
                    });
                    setIsAddCutomReportVisible(false);
                    setReportsInfo(resetReportsInfo);
                    getReportsInfo("custom_generated");
                  }
                });
              }
            }}
          />
        </span>
      </div>
    );
  };

  const reportsData = (id, index) => {
    if (
      !!id &&
      isAllLoaded &&
      ((reportsList && reportsList.length && !index) ||
        (reportsCustList && reportsCustList.length && !!index))
    ) {
      if (!!index) {
        setCustomReportsList(
          reportsCustList.filter((repo) => repo.pipeline_id === id),
        );
      } else {
        setAutoGeneratedReportsList(
          reportsList.filter((repo) => repo.pipeline_id === id),
        );
      }
    } else {
      getReportsInfo(!!index ? "custom_generated" : "auto-generated");
    }
  };

  return (
    <>
      <div className={`row ${s.root}`}>
        <div className={`col-md-12 col-lg-12 ${s.wrapper}`}>
          <Widget
            title={
              <>
                <div className="d-flex justify-content-between align-items-center">
                  <h5 className="d-flex justify-content-between align-items-center">
                    Reports
                    <span className="mx-3 d-flex justify-content-between align-items-center">
                      <button
                        className={`p-button p-component mx-2 p-2 p-button-text ${
                          activeIndex === 0
                            ? "bg-wizBi text-white"
                            : " text-wizBi"
                        }`}
                        onClick={(evt) => {
                          setActiveIndex(0);
                          reportsData(searchParams.get("pipelineId"), 0);
                        }}
                      >
                        In-Built Reports
                      </button>
                      <button
                        className={`p-button p-component mx-2 p-2 p-button-text ${
                          activeIndex === 1
                            ? "bg-wizBi text-white"
                            : " text-wizBi"
                        }`}
                        onClick={(evt) => {
                          setActiveIndex(1);
                          reportsData(searchParams.get("pipelineId"), 1);
                        }}
                      >
                        Custom Reports
                      </button>

                      {!!activeIndex && (
                        <i
                          className="fa fa-plus-circle text-wizBi mx-2"
                          role="button"
                          onClick={(evt) => {
                            setIsAddCutomReportVisible(true);
                            setReportsInfo({
                              ...resetReportsInfo,
                              pipeline_id: pipelineInfo.id,
                            });
                          }}
                        ></i>
                      )}
                    </span>
                  </h5>
                  {/* <span className="mx-3"> */}

                  {/* </span> */}
                  <div className="d-flex align-items-center">
                    <div className="d-flex  mx-4">
                      <Checkbox
                        inputId="showAllData"
                        name="pipelines"
                        value="pipelines"
                        onChange={onShowAllData}
                        checked={showAllData}
                        disabled={
                          (!isLoading &&
                            !Array.isArray(autoGeneratedReportsList)) ||
                          !pipelineInfo.id
                        }
                      />
                      <label htmlFor="showAllData" className="mx-2">
                        Show all data
                      </label>
                    </div>
                    <div
                      className="form-group mb-2 mx-2"
                      style={{ width: "400px" }}
                    >
                      <WizBIDropDown
                        labelName="Pipeline"
                        panelClass="mb-2 w-100"
                      >
                        <Dropdown
                          filter
                          value={pipelineInfo}
                          style={{ height: "35px" }}
                          className="w-100 d-flex form-control active  align-items-center"
                          onChange={(e) => {
                            filterReportsList(e);
                          }}
                          options={pipelinesResult}
                          optionLabel="name"
                          disabled={
                            !isLoading &&
                            !Array.isArray(autoGeneratedReportsList)
                          }
                          placeholder="Select a Pipeline"
                        />
                      </WizBIDropDown>
                    </div>
                  </div>
                </div>
              </>
            }
            className={`mb-0`}
            bodyClass={`m-0 p-0 ${s.widgetBodyClass}`}
          >
            
            <div className={`w-100 px-4`}>
              {!activeIndex && (
                <>
                  {!isLoading && !Array.isArray(autoGeneratedReportsList) && (
                    <h5 className="my-5 d-flex justify-content-center">
                      Please wait while reports is prepared for loading ...
                    </h5>
                  )}
                  {!isLoading &&
                  Array.isArray(autoGeneratedReportsList) &&
                  !autoGeneratedReportsList.length ? (
                    <h5 className=" d-flex justify-content-center mt-5">
                      No Reports available
                    </h5>
                  ) : (
                    <>
                      {Array.isArray(autoGeneratedReportsList) &&
                        autoGeneratedReportsList.map((item) => {
                          return (
                            <Widget
                              bodyClass="m-0 p-0"
                              className={`my-1 mx-2 ${s.pipelineItem}`}
                              key={uuidv4()}
                            >
                              <div>
                                <div className="d-flex align-items-center flex-nowrap justify-content-between p-3">
                                  <div className="mx-2 text-truncate">
                                    <h5>{item.name}</h5>
                                    <div className="d-flex align-items-center flex-nowrap justify-content-between">
                                      <span
                                        style={{ fontSize: "12px" }}
                                        className="text-gray"
                                      >
                                        Reports Id : {item.id}
                                      </span>
                                      <span
                                        className="mx-3 text-gray"
                                        style={{ fontSize: "12px" }}
                                      >
                                        Pipeline Id: {item.pipeline_id}
                                      </span>
                                    </div>
                                  </div>

                                  <div className="d-flex mx-2 text-truncate">
                                    <span
                                      className="mx-3"
                                      role="button"
                                      onClick={() => {
                                        downloadReport(
                                          "show_sql_report",
                                          item.id,
                                          item.name,
                                          "S",
                                        );
                                      }}
                                    >
                                      <SQLIcon />
                                    </span>
                                    <span
                                      className="mx-3"
                                      role="button"
                                      onClick={() => {
                                        downloadReport(
                                          "show_excel_report",
                                          item.id,
                                          item.name,
                                          "E",
                                        );
                                      }}
                                    >
                                      <i className="fa fa-file-excel-o text-success"></i>
                                    </span>
                                    <span
                                      className="mx-3"
                                      role="button"
                                      onClick={() => {
                                        downloadReport(
                                          "show_pdf_report",
                                          item.id,
                                          item.name,
                                          "P",
                                        );
                                      }}
                                    >
                                      <i className="fa fa-file-pdf-o text-danger"></i>
                                    </span>
                                    <span
                                      className="mx-3"
                                      role="button"
                                      onClick={() => {
                                        downloadReport(
                                          "show_html_report",
                                          item.id,
                                          item.name,
                                          "H",
                                        );
                                      }}
                                    >
                                      <i className="fa fa-code text-warning"></i>
                                    </span>
                                  </div>
                                </div>
                              </div>
                            </Widget>
                          );
                        })}
                    </>
                  )}
                </>
              )}
              {!!activeIndex && (
                <>
                  {!isLoading && !Array.isArray(customReportsList) && (
                    <h5 className="my-5 d-flex justify-content-center">
                      Please wait while reports is prepared for loading ...
                    </h5>
                  )}
                  {!isLoading &&
                  Array.isArray(customReportsList) &&
                  !customReportsList.length ? (
                    <h5 className=" d-flex justify-content-center mt-5">
                      No Reports available
                    </h5>
                  ) : (
                    <>
                      {Array.isArray(customReportsList) &&
                        customReportsList.map((item) => {
                          return (
                            <Widget
                              bodyClass="m-0 py-0 mx-3"
                              className={`my-1 mx-2 ${s.pipelineItem}`}
                              key={uuidv4()}
                            >
                              <div>
                                <div className="d-flex align-items-center flex-nowrap justify-content-between p-3">
                                  <div className="mx-2 text-truncate">
                                    <h5>{item.name}</h5>
                                    <div className="d-flex align-items-center flex-nowrap justify-content-between">
                                      <span
                                        style={{ fontSize: "12px" }}
                                        className="text-gray"
                                      >
                                        Reports Id : {item.id}
                                      </span>
                                      <span
                                        className="mx-3 text-gray"
                                        style={{ fontSize: "12px" }}
                                      >
                                        Pipeline Id: {item.pipeline_id}
                                      </span>
                                    </div>
                                  </div>

                                  <div className="d-flex mx-2 text-truncate">
                                    <span
                                      className="mx-3"
                                      role="button"
                                      onClick={() => {
                                        downloadReport(
                                          "show_sql_report",
                                          item.id,
                                          item.name,
                                          "S",
                                        );
                                      }}
                                    >
                                      <SQLIcon />
                                    </span>
                                    <span
                                      className="mx-3"
                                      role="button"
                                      onClick={() => {
                                        downloadReport(
                                          "show_excel_report",
                                          item.id,
                                          item.name,
                                          "E",
                                        );
                                      }}
                                    >
                                      <i className="fa fa-file-excel-o text-success"></i>
                                    </span>
                                    <span
                                      className="mx-3"
                                      role="button"
                                      onClick={() => {
                                        downloadReport(
                                          "show_pdf_report",
                                          item.id,
                                          item.name,
                                          "P",
                                        );
                                      }}
                                    >
                                      <i className="fa fa-file-pdf-o text-danger"></i>
                                    </span>
                                    <span
                                      className="mx-3"
                                      role="button"
                                      onClick={() => {
                                        downloadReport(
                                          "show_html_report",
                                          item.id,
                                          item.name,
                                          "H",
                                        );
                                      }}
                                    >
                                      <i className="fa fa-code text-warning"></i>
                                    </span>
                                    <span
                                      className="mx-3"
                                      role="button"
                                      onClick={() => {
                                        setReportsInfo(item);
                                        setIsAddCutomReportVisible(true);
                                      }}
                                    >
                                      <i className="fa fa-edit text-info"></i>
                                    </span>
                                  </div>
                                </div>
                              </div>
                            </Widget>
                          );
                        })}
                    </>
                  )}
                </>
              )}
            </div>
          </Widget>
        </div>
      </div>
      <Toast ref={toast} />
      <Dialog
        header={
          <div className="d-flex align-items-center">
            <small className="mx-1 px-1 d-block">
              Add / Edit Custom Report
            </small>
          </div>
        }
        visible={isAddCutomReportVisible}
        draggable={false}
        style={{ width: "50vw" }}
        onHide={() => setIsAddCutomReportVisible(false)}
        footer={customReportsFooter()}
      >
        <div className="form-group mb-2">
          <WizBIDropDown
            labelName="Pipeline"
            panelClass="mt-2 w-100"
            className={`${
              submitted && !reportsInfo.pipeline_id ? "is-invalid" : ""
            }`}
          >
            <Dropdown
              filter
              value={reportsInfo.pipeline_id}
              style={{ height: "35px" }}
              className="w-100 d-flex form-control active  align-items-center"
              onChange={(e) => {
                setReportsInfo({ ...reportsInfo, pipeline_id: e.value });
              }}
              options={pipelinesResult}
              optionLabel="name"
              optionValue="id"
              disabled={
                (!isLoading && !Array.isArray(autoGeneratedReportsList)) ||
                !!reportsInfo.id
              }
              placeholder="Select a Pipeline"
            />
            <div
              className={`invalid-feedback${
                submitted && !reportsInfo.pipeline_id ? " d-block" : ""
              }`}
            >
              Please select a pipeline type!
            </div>
          </WizBIDropDown>
        </div>
        <div className="form-group mb-2">
          <WizBIInput
            labelName="Report Name"
            className={`${submitted && !reportsInfo.name ? "is-invalid" : ""}`}
            controls={{
              value: reportsInfo.name,
              onChange: (e) => {
                setReportsInfo({ ...reportsInfo, name: e.target.value });
              },
              id: "name",
              type: "text",
            }}
          >
            
            <div className="invalid-feedback">A valid name is required!</div>
          </WizBIInput>
        </div>

        <div className="form-group mb-2">
          <WizBIInput
            labelName="SQL Query"
            className={`${
              submitted && !reportsInfo.sql_query ? "is-invalid" : ""
            }`}
            controls={{
              onChange: (e) => {
                setReportsInfo({ ...reportsInfo, sql_query: e.target.value });
              },
              value: reportsInfo.sql_query,
              id: "sql_query",
              type: "textarea",
              rows: "4",
            }}
          >
            
            <div className="invalid-feedback">
              A valid sql query is required!
            </div>
          </WizBIInput>
        </div>
      </Dialog>
    </>
  );
};

export default Reports;
